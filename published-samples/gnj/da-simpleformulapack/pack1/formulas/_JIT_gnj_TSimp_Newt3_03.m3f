[OPTIONS]
.DEOption = -1
.DEScale = 1
.SIPow = 2
.Version = 9
.Double fix_r = 0
.Double x_shift = 0
.Double y_shift = 0
.Double z_shift = 0
[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
   x_tmp, y_tmp, z_tmp, r1: double;

begin
   r1 := (x*x + y*y + z*z - 2*y*z);
   r1 := 1/(3*r1*r1+fix_r);
   x_tmp := x*x - y*y - z*z + 2*y*z;
   y_tmp := -2*x*y;
   z_tmp := -2*x*z;

   x := 2*x/3 - x_tmp*r1 + x_shift + PIteration3D^.J1;
   y := 2*y/3 - y_tmp*r1 + y_shift + PIteration3D^.J2;
   z := 2*z/3 - z_tmp*r1 + z_shift + PIteration3D^.J3;
end;
[END]
SUMMARY:
  Second Approach to define a Newton method on
  z^3+1=0 for a certain (non-trig) type of 
  3-dimensional numbers
  
  Old formula name:  JIT_gann_TSimp_Newt3_2.m3f
  
CHANGES:
  _JIT_gnj_TSimp_Newt3_03.m3f:
    Moved to Adds section

  JIT_gnj_TSimp_Newt3_02.m3f:
    Added a fix for r (fix_r) to avoid r <= 0 (Use positive values)

FORMULA:
   r1 := (x*x + y*y + z*z - 2*y*z);
   r1 := 1/(3*r1*r1+fix_r);
   x_tmp := x*x - y*y - z*z + 2*y*z;
   y_tmp := -2*x*y;
   z_tmp := -2*x*z;

   x := 2*x/3 - x_tmp*r1 + x_shift + cx;
   y := 2*y/3 - y_tmp*r1 + y_shift + cy;
   z := 2*z/3 - z_tmp*r1 + z_shift + cz;