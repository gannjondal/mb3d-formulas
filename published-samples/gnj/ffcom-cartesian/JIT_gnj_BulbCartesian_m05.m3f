[OPTIONS]
.DEScale = 1
.SIPow = 2
.Version = 9
.Double Var_x_1 = 0
.Double Var_x_2 = 0
.Double Var_x_3 = 0
.Double Var_x_4 = 0
.Double Var_x_5 = 0
.Double Var_x_6 = 0
.Double Var_y_1 = 0
.Double Var_y_2 = 0
.Double Var_y_3 = 0
.Double Var_y_4 = 0
.Double Var_y_5 = 0

[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
   rxy, sq_rxy, qu_rxy: double;
   x_tmp, y_tmp, z_tmp: double;
   rho1, rho2: double;
   tmp: double;
   sq_x, sq_y, sq_z: double; 
   qu_x, qu_y, qu_z: double; 
   hx_x, hx_y, hx_z: double; 
   cx, cy, cz: double;

begin

// set c
   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;
  
// calculating helper variables
   sq_rxy := x*x + y*y;
   rxy := sqrt(sq_rxy);
   qu_rxy := sq_rxy*sq_rxy;
   
   sq_x := x*x;
   sq_y := y*y;
   sq_z := z*z;
   
   qu_x := sq_x*sq_x;
   qu_y := sq_y*sq_y;
   qu_z := sq_z*sq_z;
   
   hx_x := qu_x*sq_x;
   hx_y := qu_y*sq_y;
   hx_z := qu_z*sq_z;
   
   tmp := 1 + (qu_z*qu_z - 28*hx_z*sq_rxy + 70*qu_z*qu_rxy - 28*sq_z*qu_rxy*sq_rxy)/(qu_rxy*qu_rxy);
   
//calculate the power   
   x_tmp := (1 + Var_x_1)*tmp*((1 + Var_x_2)*qu_x*qu_x - (28 + Var_x_3)*qu_x*sq_x*sq_y + (70 + Var_x_4)*qu_x*qu_y - (28 + Var_x_5)*sq_x*qu_y*sq_y + (1 + Var_x_6)*qu_y*qu_y);
   y_tmp := (8 + Var_y_1)*tmp*x*y*((1 + Var_y_2)*hx_x - (7 + Var_y_3)*qu_x*sq_y + (7 + Var_y_4)*sq_x*qu_y - (1 + Var_y_5)*hx_y);
   z_tmp := 8*z*rxy*(sq_z-sq_rxy)*(qu_z - 6*sq_z*sq_rxy + qu_rxy);
   
//set x, y, and z
   x := x_tmp + cx;
   y := y_tmp + cy;
   z := z_tmp + cz;
   
end;
[END]
SUMMARY:
General calculation:
 Common (= negative sine) power 8 bulb, pure cartesian calculation.
 t(n+1) = t(n)^8 + c

where 
* t:=(x,y,z) in cartesian coordinates
* c:=(cx,cy,cz) in cartesian coordinates

CHANGES:Based on JIT_gnj_BulbCartesian.m3f
Basic Mutation 05:  Each parameter adds a fix value to one coefficient of the final calculation of the x, and y coordinates

FORMULA:

// set c
   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;
  
// calculating helper variables
   sq_rxy := x*x + y*y;
   rxy := sqrt(sq_rxy);
   qu_rxy := sq_rxy*sq_rxy;
   
   sq_x := x*x;
   sq_y := y*y;
   sq_z := z*z;
   
   qu_x := sq_x*sq_x;
   qu_y := sq_y*sq_y;
   qu_z := sq_z*sq_z;
   
   hx_x := qu_x*sq_x;
   hx_y := qu_y*sq_y;
   hx_z := qu_z*sq_z;
   
   tmp := 1 + (qu_z*qu_z - 28*hx_z*sq_rxy + 70*qu_z*qu_rxy - 28*sq_z*qu_rxy*sq_rxy)/(qu_rxy*qu_rxy);
   
//calculate the power   
   x_tmp := (1 + Var_x_1)*tmp*((1 + Var_x_2)*qu_x*qu_x - (28 + Var_x_3)*qu_x*sq_x*sq_y + (70 + Var_x_4)*qu_x*qu_y - (28 + Var_x_5)*sq_x*qu_y*sq_y + (1 + Var_x_6)*qu_y*qu_y);
   y_tmp := (8 + Var_y_1)*tmp*x*y*((1 + Var_y_2)*hx_x - (7 + Var_y_3)*qu_x*sq_y + (7 + Var_y_4)*sq_x*qu_y - (1 + Var_y_5)*hx_y);
   z_tmp := 8*z*rxy*(sq_z-sq_rxy)*(qu_z - 6*sq_z*sq_rxy + qu_rxy);
   
//set x, y, and z
   x := x_tmp + cx;
   y := y_tmp + cy;
   z := z_tmp + cz;
