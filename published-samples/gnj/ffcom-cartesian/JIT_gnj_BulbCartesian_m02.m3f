[OPTIONS]
.DEScale = 1
.SIPow = 2
.Version = 9
.Double Vary_tmp01 = 0
.Double Vary_tmp02 = 0
.Double Vary_tmp03 = 0
.Double Vary_tmp04 = 0
.Double Vary_tmp05 = 0
.Double Vary_tmp06 = 0
.Double Vary_tmp07 = 0
.Double Vary_tmp08 = 0
.Double Vary_tmp09 = 0
.Double Vary_tmp10 = 0
.Double Vary_tmp11 = 0
.Double Vary_tmp12 = 0
.Double Vary_tmp13 = 0
.Double Vary_tmp14 = 0

[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
   rxy, sq_rxy, qu_rxy: double;
   x_tmp, y_tmp, z_tmp: double;
   rho1, rho2: double;
   tmp: double;
   sq_x, sq_y, sq_z: double; 
   qu_x, qu_y, qu_z: double; 
   hx_x, hx_y, hx_z: double; 
   cx, cy, cz: double;

begin

// set c
   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;
  
// calculating helper variables
   sq_rxy := x*x + y*y;
   rxy := sqrt(sq_rxy);
   qu_rxy := sq_rxy*sq_rxy;
   
   sq_x := x*x;
   sq_y := y*y;
   sq_z := z*z;
   
   qu_x := sq_x*sq_x;
   qu_y := sq_y*sq_y;
   qu_z := sq_z*sq_z;
   
   hx_x := qu_x*sq_x;
   hx_y := qu_y*sq_y;
   hx_z := qu_z*sq_z;
   
   tmp := 1 + ((1 + Vary_tmp01)*(qu_z + Vary_tmp02)*qu_z - (28 + Vary_tmp03)*(hx_z + Vary_tmp04)*(sq_rxy + Vary_tmp05) + (70 + Vary_tmp06)*(qu_z + Vary_tmp07)*(qu_rxy + Vary_tmp08) - (28 + Vary_tmp09)*(sq_z + Vary_tmp10)*(qu_rxy + Vary_tmp11)*(sq_rxy + Vary_tmp12))/((1 + Vary_tmp13)*(qu_rxy + Vary_tmp14)*qu_rxy);
   
//calculate the power   
   x_tmp := tmp*(qu_x*qu_x - 28*qu_x*sq_x*sq_y + 70*qu_x*qu_y - 28*sq_x*qu_y*sq_y + qu_y*qu_y);
   y_tmp := 8*tmp*x*y*(hx_x - 7*qu_x*sq_y + 7*sq_x*qu_y - hx_y);
   z_tmp := 8*z*rxy*(sq_z-sq_rxy)*(qu_z - 6*sq_z*sq_rxy + qu_rxy);
   
//set x, y, and z
   x := x_tmp + cx;
   y := y_tmp + cy;
   z := z_tmp + cz;
   
end;
[END]
SUMMARY:
General calculation:
 Common (= negative sine) power 8 bulb, pure cartesian calculation.
 t(n+1) = t(n)^8 + c

where 
* t:=(x,y,z) in cartesian coordinates
* c:=(cx,cy,cz) in cartesian coordinates

CHANGES:Based on JIT_gnj_BulbCartesian.m3f
Basic Mutation 02:  Each parameter adds a fix value to one coefficient of the temporary multiplier

FORMULA:

// set c
   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;
  
// calculating helper variables
   sq_rxy := x*x + y*y;
   rxy := sqrt(sq_rxy);
   qu_rxy := sq_rxy*sq_rxy;
   
   sq_x := x*x;
   sq_y := y*y;
   sq_z := z*z;
   
   qu_x := sq_x*sq_x;
   qu_y := sq_y*sq_y;
   qu_z := sq_z*sq_z;
   
   hx_x := qu_x*sq_x;
   hx_y := qu_y*sq_y;
   hx_z := qu_z*sq_z;
   
   tmp := 1 + ((1 + Vary_tmp01)*(qu_z + Vary_tmp02)*qu_z - (28 + Vary_tmp03)*(hx_z + Vary_tmp04)*(sq_rxy + Vary_tmp05) + (70 + Vary_tmp06)*(qu_z + Vary_tmp07)*(qu_rxy + Vary_tmp08) - (28 + Vary_tmp09)*(sq_z + Vary_tmp10)*(qu_rxy + Vary_tmp11)*(sq_rxy + Vary_tmp12))/((1 + Vary_tmp13)*(qu_rxy + Vary_tmp14)*qu_rxy);
   
//calculate the power   
   x_tmp := tmp*(qu_x*qu_x - 28*qu_x*sq_x*sq_y + 70*qu_x*qu_y - 28*sq_x*qu_y*sq_y + qu_y*qu_y);
   y_tmp := 8*tmp*x*y*(hx_x - 7*qu_x*sq_y + 7*sq_x*qu_y - hx_y);
   z_tmp := 8*z*rxy*(sq_z-sq_rxy)*(qu_z - 6*sq_z*sq_rxy + qu_rxy);
   
//set x, y, and z
   x := x_tmp + cx;
   y := y_tmp + cy;
   z := z_tmp + cz;
