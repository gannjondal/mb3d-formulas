[OPTIONS]
.DEScale = 1
.RStop = 4
.SIPow = 2
.Version = 9

.Double Offset = 1.0e-10
.Double Power_ = 3
.Double Solution_x = 1.0
.Double Solution_y = 0.0
.Double Solution_z = 0.0
[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
   sq_r: double;
   r, theta, phi: double;
   r_pow, theta_pow, phi_pow: double;
   cx, cy, cz: double;
   pow_eff, fac_eff: double;
   x_rec, y_rec, z_rec: double;

begin
   
   sq_r := 1/(x*x + y*y + z*z + Offset);
   
   x := x*sq_r + Solution_x;
   y := -y*sq_r + Solution_y;
   z := -z*sq_r + Solution_z;

   pow_eff := 1 - Power_;
   fac_eff := (Power_ - 1)/Power_;

   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;
  
   sq_r := x*x + y*y + z*z;
   r := sqrt(sq_r);

   phi := ArcSin(z/r) ;
   theta := ArcTan2(y,x) ;

   r_pow:= power(r, pow_eff);
   phi_pow := phi*pow_eff;
   theta_pow := theta*pow_eff;

   x := fac_eff*x - cx*cos(phi_pow)*cos(theta_pow)*r_pow/Power_ ;
   y := fac_eff*y - cy*cos(phi_pow)*sin(theta_pow)*r_pow/Power_ ;
   z := fac_eff*z + cz*sin(phi_pow)*r_pow/Power_ ;
   
   sq_r := 1/((x-Solution_x)*(x-Solution_x) + (y-Solution_y)*(y-Solution_y) + (z-Solution_z)*(z-Solution_z) + Offset);
   x := (x-Solution_x)*sq_r;
   y := -(y-Solution_y)*sq_r;
   z := -(z-Solution_z)*sq_r;
   
end;
[END]
SUMMARY:
 Pseudo Newton made from classic Mandelbulb formula in triplex algebra for learning / testing purposes
 1/q^n ":=" q^(-n)

CHANGES:
 Basis:  JIT_gnj_RealPowerPseuNewt_03.m3f

 JIT_gnj_RealPowNewton_01.m3f:
  - Variation that tries to reach divergence for ONE known solution (which should be specifically easy if Solution â‚¬ Z, and Julia is on)
    NOTE:  This is the same formula as JIT_gnj_RealPowerPseuNewt5_02.m3f - it is just the base of a new branch for easier naming

PARAMETERS:
 Solution_x/y/z: The calculated, or guessed target solution for the Newton method that is taken as the fractal's outside
 Power_:  The power of the polynom to be solved (t^power - c = 0)
 Offset:  Added to avoid division by zero when calculating the reciprokes
	
FORMULA:
   sq_r := 1/(x*x + y*y + z*z + Offset);
   
   x := x*sq_r + Solution_x;
   y := -y*sq_r + Solution_y;
   z := -z*sq_r + Solution_z;

   pow_eff := 1 - Power_;
   fac_eff := (Power_ - 1)/Power_;

   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;
  
   sq_r := x*x + y*y + z*z;
   r := sqrt(sq_r);

   phi := ArcSin(z/r) ;
   theta := ArcTan2(y,x) ;

   r_pow:= power(r, pow_eff);
   phi_pow := phi*pow_eff;
   theta_pow := theta*pow_eff;

   x := fac_eff*x - cx*cos(phi_pow)*cos(theta_pow)*r_pow/Power_ ;
   y := fac_eff*y - cy*cos(phi_pow)*sin(theta_pow)*r_pow/Power_ ;
   z := fac_eff*z + cz*sin(phi_pow)*r_pow/Power_ ;
   
   sq_r := 1/((x-Solution_x)*(x-Solution_x) + (y-Solution_y)*(y-Solution_y) + (z-Solution_z)*(z-Solution_z) + Offset);
   x := (x-Solution_x)*sq_r;
   y := -(y-Solution_y)*sq_r;
   z := -(z-Solution_z)*sq_r;
