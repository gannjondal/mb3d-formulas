[OPTIONS]
.DEOption = -1
.DEScale = 1
.SIPow = 2
.Version = 9
.Double AddCAtEnd = 0
.Double Complex_AddC_x = 0
.Double Complex_AddC_y = 0
.Double Complex_AddFix_x = 0
.Double Complex_AddFix_y = 0
.Double Complex_MultAll_x = 1
.Double Complex_MultAll_y = 0
.Double Complex_MultZ_x = 1
.Double Complex_MultZ_y = 0
.Double Shift_QuotBackward = 1
.Double Shift_QuotCForward = 1
.Double Shift_QuotXYZForward = 1
.Double SquaredRBackward = 0
[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
   cx, cy, cz: double;
   rc, sq_rc: double;
   cx_norm, cy_norm, cz_norm: double;


   r, sq_r: double;
   x_norm, y_norm, z_norm: double;
   quot_xyz, quot_c, quot_xyz_back: double;

   cmp_r, cmp_phi: double;
   cmp_x, cmp_y: double;
   cmp_cx, cmp_cy: double;
   cmp_xtmp, cmp_ytmp: double;
   

   r_pow, theta_pow, phi_pow: double;
   sph, sth, cph, cth: double;

begin
   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;
  

// calculating helper variables
   sq_rc := cx*cx + cy*cy + cz*cz;
   rc := sqrt(sq_rc);

   sq_r := x*x + y*y + z*z;
   r := sqrt(sq_r);

// normalization

   x_norm := x/r;
   y_norm := y/r;
   z_norm := z/r;

   cx_norm := cx/r;
   cy_norm := cy/r;
   cz_norm := cz/r;

// transform to complex

   quot_xyz := 1/(Shift_QuotXYZForward-z_norm);
   cmp_x := x_norm*quot_xyz;
   cmp_y := y_norm*quot_xyz;
   
   quot_c := 1/(Shift_QuotCForward-cz_norm);
   cmp_cx := cx_norm*quot_c;
   cmp_cy := cy_norm*quot_c;

// complex calculation

   cmp_xtmp := cmp_cx*Complex_AddC_x - cmp_cy*Complex_AddC_y + cmp_x*Complex_MultZ_x - cmp_y*Complex_MultZ_y + Complex_AddFix_x;
   cmp_ytmp := cmp_cx*Complex_AddC_y + cmp_cy*Complex_AddC_x + cmp_y*Complex_MultZ_x + cmp_x*Complex_MultZ_y + Complex_AddFix_y;
   
   cmp_x := cmp_xtmp;
   cmp_y := cmp_ytmp;

   cmp_xtmp := cmp_x*Complex_MultAll_x - cmp_y*Complex_MultAll_y;
   cmp_ytmp := cmp_x*Complex_MultAll_y + cmp_y*Complex_MultAll_x;   

   cmp_x := cmp_xtmp;
   cmp_y := cmp_ytmp;


// transform back to sphere / triplex;

   quot_xyz_back := 1/(Shift_QuotBackward + cmp_x*cmp_x + cmp_y*cmp_y); 

   x_norm := 2*cmp_x*quot_xyz_back;
   y_norm := 2*cmp_y*quot_xyz_back;
   z_norm := (cmp_x*cmp_x + cmp_y*cmp_y - 1)*quot_xyz_back;

// de-nomalization

   If SquaredRBackward = 1 then
     begin
       //  NOTE:  The use of sq_r is mathematical useless; however in any 
       //         other case there's not enough dynamic
       x := x_norm * sq_r + AddCAtEnd*cx;
       y := y_norm * sq_r + AddCAtEnd*cy;
       z := z_norm * sq_r + AddCAtEnd*cz;
     end
   else
     begin     
       x := x_norm * r + AddCAtEnd*cx;
       y := y_norm * r + AddCAtEnd*cy;
       z := z_norm * r + AddCAtEnd*cz;
     end;

end;
[END]
SUMMARY:
  Simple transformations on complex plane via Riemann sphere
  Moved to the Adds tabs which avoids odd effects on DE calculation

  What this formula does is to 
  - map a triplex number as a Riemann sphere 
    (i.e. divide all coordinates by R)
  - transform it to the complex plane
  - does some simple operation in the complex plane:
   
     z(n+1) = Complex_MultAll * (Complex_MultZ * z(n) + Complex_AddC * c + Complex_AddFix)
  
  - transform the number back to a Riemann sphere
  - re-apply R

NOTE:  
 By standard the radius of the triplex number will not be changed.
 Therefore this is more a transformation rather than independent formula.

PARAMETER:
 - Complex_***_x,y:
 
   This are the parameters with which you can control the complex operations. 
   Each of the below Complex* variables are (as the name states) complex, 
   and consists of a real (x), and an imaginary (y) part
   z(n+1) = Complex_MultAll * (Complex_MultZ * z(n) + Complex_AddC * c + Complex_AddFix)
   
 - Shift_QuotCForward / Shift_QuotXYZForward / Shift_QuotBackward:
     They are controlling some quotients while transforming 
     Riemann sphere <-> complex plane

   Shift_QuotCForward / Shift_QuotXYZForward:  
     Especially values between 1 and -1 are interesting. There may be some weird regions
     (if the quotient gets to close to 0), but there are also the largest effects.
     
   Shift_QuotBackward:
     Most interesting values are between 1 and 0. 
     Larger values can become boring (too regular surfaces).
     Negative values can become mostly weird.

 - SquaredRBackward:
     0:  Only original R will be re-applied. Meant that is a pure transformation.
     1:  Squared R gets used. In my current tests it results in more smooth surface.

     No other values can be used.

 - AddCAtEnd:
     <>0:  
      Add the original c after re-applying R. 
      Together with SquaredRBackward=1 there may come up some basic fractal behavior.

------------------------------------------------------------------------------

FORMULA:
// calculating helper variables
   sq_rc := cx*cx + cy*cy + cz*cz;
   rc := sqrt(sq_rc);

   sq_r := x*x + y*y + z*z;
   r := sqrt(sq_r);

// normalization

   x_norm := x/r;
   y_norm := y/r;
   z_norm := z/r;

   cx_norm := cx/r;
   cy_norm := cy/r;
   cz_norm := cz/r;

// transform to complex

   quot_xyz := 1/(Shift_QuotXYZForward-z_norm);
   cmp_x := x_norm*quot_xyz;
   cmp_y := y_norm*quot_xyz;
   
   quot_c := 1/(Shift_QuotCForward-cz_norm);
   cmp_cx := cx_norm*quot_c;
   cmp_cy := cy_norm*quot_c;

// complex calculation

   cmp_xtmp := cmp_cx*Complex_AddC_x - cmp_cy*Complex_AddC_y + cmp_x*Complex_MultZ_x - cmp_y*Complex_MultZ_y + Complex_AddFix_x;
   cmp_ytmp := cmp_cx*Complex_AddC_y + cmp_cy*Complex_AddC_x + cmp_y*Complex_MultZ_x + cmp_x*Complex_MultZ_y + Complex_AddFix_y;
   
   cmp_x := cmp_xtmp;
   cmp_y := cmp_ytmp;

   cmp_xtmp := cmp_x*Complex_MultAll_x - cmp_y*Complex_MultAll_y;
   cmp_ytmp := cmp_x*Complex_MultAll_y + cmp_y*Complex_MultAll_x;   

   cmp_x := cmp_xtmp;
   cmp_y := cmp_ytmp;

   // transform back to sphere / triplex;

   quot_xyz_back := 1/(Shift_QuotBackward + cmp_x*cmp_x + cmp_y*cmp_y); 

   x_norm := 2*cmp_x*quot_xyz_back;
   y_norm := 2*cmp_y*quot_xyz_back;
   z_norm := (cmp_x*cmp_x + cmp_y*cmp_y - 1)*quot_xyz_back;

// de-nomalization

   If SquaredRBackward = 1 then
     begin
       //  NOTE:  The use of sq_r is mathematical useless; however in any 
       //         other case there's not enough dynamic
       x := x_norm * sq_r + AddCAtEnd*cx;
       y := y_norm * sq_r + AddCAtEnd*cy;
       z := z_norm * sq_r + AddCAtEnd*cz;
     end
   else
     begin     
       x := x_norm * r + AddCAtEnd*cx;
       y := y_norm * r + AddCAtEnd*cy;
       z := z_norm * r + AddCAtEnd*cz;
     end;

end;