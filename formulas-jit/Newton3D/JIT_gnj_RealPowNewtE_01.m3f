[OPTIONS]
.DEScale = 1
.RStop = 16
.SIPow = 2
.Version = 9
.Double Fac_Phi = 1.0
.Double Fac_Theta = 1.0
.Double Fake_Bailout = 1.0
.Double Fake_Bailout2 = 1.0
.Double Inversion_Factor = -1.0
.Double Power_ = 3
.Double Trans_x = 0.0
.Double Trans_y = 0.0
.Double Trans_z = 0.0
[CONSTANTS]
.Double offset = 1E-10
.Double Solution_x = 1.0
.Double Solution_y = 0.0
.Double Solution_z = 0.0
[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
   sq_r: double;
   r, theta, phi: double;
   r_pow, theta_pow, phi_pow: double;
   ax, ay, az: double;
//   cx, cy, cz: double;
   pow_eff, fac_eff: double;
   sph, sth, cph, cth: double;
   diffx, diffy, diffz: double;
   r_norm: double;
   tmpx, tmpy, tmpz: double;
   rzxy, rcxy, h: double;

begin

// Preparation operations
   pow_eff := 1 - Power_;
   fac_eff := (Power_ - 1)/Power_;

   ax := PIteration3D^.J1;
   ay := PIteration3D^.J2;
   az := PIteration3D^.J3;

//   cx := -1.0;
//   cy := 0.0;
//   cz := 0.0;

   x := x + Trans_x;
   y := y + Trans_y;
   z := z + Trans_z;
   
// MB3D needs a potentially diverging value of tripex t=(x,y,z) to work correctly.
// However the Newton method for t^power-c is so far always converging.
// Fortunately there is a one-to-one relation between these values.
// Below the t from MB3D is transformed 
// to the t used for the Newton calculations
   sq_r := Fake_Bailout/(x*x + y*y + z*z + Offset);
   x := x*sq_r + Solution_x;
   y := Inversion_Factor*y*sq_r + Solution_y;
   z := Inversion_Factor*z*sq_r + Solution_z;

// Calculate the inverse power of t=(x,y,z),
// and use it for the Newton method calculations for t^power + c = 0
// i.e. t(n+1) = (power-1)*t(n)/power - c/(power*t(n)^(power-1))
   sq_r := x*x + y*y + z*z;
   r := sqrt(sq_r);

   phi := Fac_Phi*ArcSin(z/r) ;
   theta := Fac_Theta*ArcTan2(y,x) ;

   r_pow:= power(r, pow_eff);
   phi_pow := phi*pow_eff;
   theta_pow := theta*pow_eff;

   SinCos(theta_pow, sth, cth);
   SinCos(phi_pow, sph, cph);

   r_norm := r_pow/Power_ ;

   tmpx := cph*cth*r_norm;
   tmpy := cph*sth*r_norm;
   tmpz := -sph*r_norm;

// Formula simplification:
    // Commented out the multiplication of c with 1/(power*t(n)^(power-1)) -- 
    // so that we don't calculate the solution for t^power+c=0 anymore, 
    // but for t^power-1=0

    //   rcxy := sqrt(cx*cx + cy*cy);
    //   rzxy := sqrt(tmpx*tmpx + tmpy*tmpy);
       
    //   h := 1.0 - cz*tmpz/(rcxy*rzxy);
       
    //   tmpx := (cx*tmpx - cy*tmpy)*h;
    //   tmpy := (cy*tmpx + cx*tmpy)*h;
    //   tmpz := (rcxy*tmpz + rzxy*cz);

//Bring everything together
// Formula simplification:
// changed ...-tmpx, and ...-tmpy
// to ...+tmpx, and ...+tmpy
// to really search for t^power-1=0 (and not for any other constant)
   x := fac_eff*x + tmpx;
   y := fac_eff*y + tmpy;
   z := fac_eff*z - tmpz;

// Below the z used for (converging) Newton calculation 
// is transformed back to the potentially diverging z used by MB3D
// (see also the notes above)
   diffx := (x-Solution_x);
   diffy := (y-Solution_y);
   diffz := (z-Solution_z);

   sq_r := Fake_Bailout2/(diffx*diffx + diffy*diffy + diffz*diffz + Offset);
   x := diffx*sq_r;
   y := Inversion_Factor*diffy*sq_r;
   z := Inversion_Factor*diffz*sq_r;
   
   x := x - Trans_x + ax;
   y := y - Trans_y + ay;
   z := z - Trans_z + az;

end;
[END]
SUMMARY:
 3D Newton made from the bulb formula.
 Normal triplex algebra where
 1/q^n ":=" q^(-n)

CHANGES:
 Basis:  JIT_gnj_RealPowNewtonCS_3b.m3f

 JIT_gnj_RealPowNewtTB_1.m3f:
   - Leave c fix (as -1,0,0),
   - Add the Mandelbrot/Julia variable at the
     end of the outer calculation instead 
	 This is maybe mathematically meaningless, 
	 but leads to a situation where those
	 values can be used much more fruitful
	 than in earlier versions

 JIT_gnj_RealPowNewtE_01.m3f:
   - Leave Solution fix (as 1,0,0),
     keep the operations - Solution_xyz
	 variables are now just constants
     ATTENTION:  Julia values (0,0,0) are 
	 equivalent to the old 'pure' Newton bulb
   - Eliminate multiplication operations
     for c*(1/3z^2) to improve performance
	 (about 13% faster)
   - Changed RStop to the usual 16;
     this appears to work now 
	 for an unknown reason
   
PARAMETERS:

 Power_:
   Default = 3
   The power of the polynom
    (x,y,z)^power - c = 0
   to be solved

 Fake_Bailout, Fake_Bailout2:
   Default = 1 / 1
   ORIGINAL INTENTION:  
   In some hybrids it is necessary to
   increase the value of 'R Bailout'
   on the formula window to avoid
   unwanted cuts.
   In this case you may set
   Fake_Bailout to 'R bailout'/4 as a
   start value.
   MEANWHILE:
   It turned out that changing this value
   can lead to completely different
   structures. I don't have a simple 
   suggestion - you may use samples that
   exist especially on ff.org
   ATTENTION:  
   Changing the value of both params
   in parallel scales the complete object.
   You may use the _Scaling transfrom
   on 3Da tab as a pretransform to
   scale the object back.
   Fake_Bailout - used BEFORE the transformation
   Fake_Bailout2 - used AFTER the transformation

  Fac_Phi, Fac_Theta:
    Default = 1 for both
	With this params you can vary the
	radial angles of the potence
	when calculating the power of
	(x,y,z).
	Hence it disturbs the power
	calculation, but in a very smooth way.
	You even may try to set one of the
	params to 0.
	
  Trans_x/y/z:
    Parameter to set translation (forth and back) 
	
  Inversion_Factor:
    -1 -> triplex inversion
	+1 -> sphere inversion
	At least this was the thought - 
	However it turned out that they
	are equivalent for symmetry reasons.
	However, it's worth to play with values
	of |Inversion_Factor| != 1

FORMULA:
// Preparation operations
   pow_eff := 1 - Power_;
   fac_eff := (Power_ - 1)/Power_;

   ax := PIteration3D^.J1;
   ay := PIteration3D^.J2;
   az := PIteration3D^.J3;

//   cx := -1.0;
//   cy := 0.0;
//   cz := 0.0;

   x := x + Trans_x;
   y := y + Trans_y;
   z := z + Trans_z;
   
// Converting the diverging (x,y,z) back to the variable
// that can be used for the (converging) Newton method calculation
   sq_r := Fake_Bailout/(x*x + y*y + z*z + Offset);
   x := x*sq_r + Solution_x;
   y := Inversion_Factor*y*sq_r + Solution_y;
   z := Inversion_Factor*z*sq_r + Solution_z;

// Calculate the inverse power of t=(x,y,z),
// and use it for the Newton method calculations for t^power + c = 0
// i.e. t(n+1) = (power-1)*t(n)/power - c/(power*t(n)^(power-1))
   sq_r := x*x + y*y + z*z;
   r := sqrt(sq_r);

   phi := Fac_Phi*ArcSin(z/r) ;
   theta := Fac_Theta*ArcTan2(y,x) ;

   r_pow:= power(r, pow_eff);
   phi_pow := phi*pow_eff;
   theta_pow := theta*pow_eff;

   SinCos(theta_pow, sth, cth);
   SinCos(phi_pow, sph, cph);

   r_norm := r_pow/Power_ ;

   tmpx := cph*cth*r_norm;
   tmpy := cph*sth*r_norm;
   tmpz := -sph*r_norm;

//Bring everything together   
   x := fac_eff*x + tmpx;
   y := fac_eff*y + tmpy;
   z := fac_eff*z - tmpz;

// Below the hack that provides a divergent value of (x,y,z) to MB3D
// although the plain Newton method does always converge
   diffx := (x-Solution_x);
   diffy := (y-Solution_y);
   diffz := (z-Solution_z);

   sq_r := Fake_Bailout2/(diffx*diffx + diffy*diffy + diffz*diffz + Offset);
   x := diffx*sq_r;
   y := Inversion_Factor*diffy*sq_r;
   z := Inversion_Factor*diffz*sq_r;
   
   x := x - Trans_x + ax;
   y := y - Trans_y + ay;
   z := z - Trans_z + az;