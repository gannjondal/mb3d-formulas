[OPTIONS]
.DEScale = 1
.RStop = 16
.SIPow = 2
.Version = 9
.Double Fake_Bailout = 1
.Double Fake_Bailout2 = 1
.Double Trans_x = 0
.Double Trans_y = 0
.Double Trans_z = 0

[CONSTANTS]
// Formula simplification:
// Moved Solution_x/y/z to constants
.Double fac_eff = 0.6666666666
.Double offset = 1E-10
.Double Solution_x = 1
.Double Solution_y = 0
.Double Solution_z = 0
[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
// Formula simplification:
//    Commented out the declaration for variables that are not needed anymore
   sq_r, r_xy, h1: double;
//   r_2xy, r_2cxy, h2: double;
   x2, y2, z2: double;
   cx, cy, cz: double;
   diffx, diffy, diffz: double;
   tmpx, tmpy, tmpz: double;
//   tmp2x, tmp2y, tmp2z: double;

begin

// Preparation operations
// PIteration3D^.J1/2/3 are in MB3D 
// the values of the Julia constant c if Julia=on,
// and of the Mandelbrot set constant c if Julia=off
   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;

   x := x + Trans_x;
   y := y + Trans_y;
   z := z + Trans_z;

// MB3D needs a potentially diverging value of tripex t=(x,y,z) to work correctly.
// However the Newton method for t^power-c is so far always converging.
// Fortunately there is a one-to-one relation between these values.
// Below the t from MB3D is transformed 
// to the t used for the Newton calculations
   sq_r := Fake_Bailout/(x*x + y*y + z*z + Offset);
   x := x*sq_r + Solution_x;
   y := -y*sq_r + Solution_y;
   z := -z*sq_r + Solution_z;
   
   x2 := x*x;
   y2 := y*y;
   z2 := z*z;

// Calculate the inverse power of t=(x,y,z),
// and use it for the Newton method calculations for t^3 + 1 = 0
// i.e. t(n+1) = 2*t(n)/3 - 1/3*t(n)^2
   sq_r := x2 + y2 + z2;
   sq_r := 1/(3*sq_r*sq_r + offset);
   r_xy := x2 + y2;
   h1 := 1 - z2/r_xy;
   
   tmpx := h1*(x2-y2)*sq_r;
   tmpy := -2*h1*x*y*sq_r;
   tmpz := 2*z*sqrt(r_xy)*sq_r;

// Formula simplification:
    // Commented out the multiplication of c with 1/(3*z*z) -- 
    // so that we don't calculate the solution for t^3+c=0 anymore, 
    // but for t^3-1=0
    //   r_2xy := sqrt(tmpx*tmpx + tmpy*tmpy);
    //   r_2cxy := sqrt(cx*cx + cy*cy);
    //   h2 := 1 - cz*tmpz / (r_2xy*r_2cxy);
    //   
    //   tmp2x := (cx*tmpx - cy*tmpy) * h2;
    //   tmp2y := (cy*tmpx + cx*tmpy) * h2;
    //   tmp2z := r_2cxy*tmpz + r_2xy*cz;
   
// Formula simplification:
// changed ...-tmpx, and ...-tmpy
// to ...+tmpx, and ...+tmpy
// to really search for t^3-1=0 (and not for any other constant)
   x := fac_eff*x + tmpx;
   y := fac_eff*y + tmpy;
   z := fac_eff*z - tmpz;

// Below the z used for (converging) Newton calculation 
// is transformed back to the potentially diverging z used by MB3D
// (see also the notes above)
   diffx := (x - Solution_x);
   diffy := (y - Solution_y);
   diffz := (z - Solution_z);


// Formula simplification:
// Added the Julia/Mandelbrot constant cx/cy/cz
// at this point according mclarekin's idea
   sq_r := Fake_Bailout2/(diffx*diffx + diffy*diffy + diffz*diffz + Offset);
   x := diffx*sq_r + cx - Trans_x;
   y := -diffy*sq_r + cy - Trans_y;
   z := -diffz*sq_r + cz - Trans_z;

end;
[END]
SUMMARY:
 3D Newton made from the bulb formula.
 This one is with cartesian 
 co-ordinates, and thus for pow 3 only.
 Normal triplex algebra where
 1/q^n ":=" q^(-n)

CHANGES:
 Basis:  JIT_gnj_RealPowNewtonS_1.m3f

 JIT_gnj_Pow3NewtonE_01.m3f:
 - Renamed the file to follow the updated
   formula naming pattern
 - Changed code so that calculation is
   made for z^3-1=0 only (instead z^3+c=0)
 - Added Shift params for x, y, and z
   (Trans_x/y/z)
 - Splitted Scale params (Fake_Bailout*)
   into values for before, and after 
   the Newton calculations
 - Changed the meaning of the 
   Julia/Mandelbrot params 
   (Before: the c of z^3+c=0; 
   Now: a shift just after all calculations)
 - Changed the default bailout from 4 to 16
   (which is now smoother, and matches the
   usual values for other formulas)

 JIT_gnj_Pow3Newton_01.m3f
   Changed from real power (sphere
   co-ordinate) calculation to 
   cartesian coordinates, which is of
   course faster.
   This version delivers only pictures
   for z^3 - c = 0
   
 JIT_gnj_Pow3NewtonC_01.m3f
   same as JIT_gnj_Pow3Newton_02.m3f.
   Made to distinguish the formulas
   easier ---
   Added actual multiplication of c.
   Now the formula should really
   calculate the solutions of
   z^3 + c = 0
   (before there was no triplex
   multiplication with c)
 
PARAMETERS:
 Fake_Bailout / _post:
   Default = 1
   Scale the calculation of the 
   squared value used for inversion.
   
   Fake_Bailout is applied before
   the Newton calculation,
   and the other param afterwards.
   
   Please keep in mind that Fake_Bailout
   enlarges the object while the same
   value at Fake_Bailout2 does reduces it
   (for the same factor)
   
  Trans_x/y/z:
    Parameter to set translation (forth and back) 

FORMULA:
// Preparation operations
   cx := PIteration3D^.J1;
   cy := PIteration3D^.J2;
   cz := PIteration3D^.J3;

   x := x + Trans_x;
   y := y + Trans_y;
   z := z + Trans_z;

// Converting the diverging (x,y,z) back to the variable
// that can be used for the (converging) Newton method calculation
   sq_r := Fake_Bailout/(x*x + y*y + z*z + Offset);
   x := x*sq_r + Solution_x;
   y := -y*sq_r + Solution_y;
   z := -z*sq_r + Solution_z;
   
   x2 := x*x;
   y2 := y*y;
   z2 := z*z;

// Calculate the inverse power of t=(x,y,z),
// and use it for the Newton method calculations for t^power + c = 0
// i.e. t(n+1) = 2*t(n)/3 - c/2*t(n)^2
   sq_r := x2 + y2 + z2;
   sq_r := 1/(3*sq_r*sq_r + offset);
   r_xy := x2 + y2;
   h1 := 1 - z2/r_xy;
   
   tmpx := h1*(x2-y2)*sq_r;
   tmpy := -2*h1*x*y*sq_r;
   tmpz := 2*z*sqrt(r_xy)*sq_r;

   x := fac_eff*x + tmpx;
   y := fac_eff*y + tmpy;
   z := fac_eff*z - tmpz;

// Below the hack that provides a divergent value of (x,y,z) to MB3D
// although the plain Newton method does always converge
   diffx := (x - Solution_x);
   diffy := (y - Solution_y);
   diffz := (z - Solution_z);

   sq_r := Fake_Bailout2/(diffx*diffx + diffy*diffy + diffz*diffz + Offset);
   x := diffx*sq_r + cx - Trans_x;
   y := -diffy*sq_r + cy - Trans_y;
   z := -diffz*sq_r + cz - Trans_z;
