[OPTIONS]
.DEoption = 4
.DEScale = 1
.RStop = 16
.SIPow = 2
.Version = 9
.Double Fac_Theta = 1.0
.Double Fake_Bailout = 1
.Double Fake_Bailout2 = 1
.Double Inversion_Factor = -1.0
.Double Power_ = 3
.Double Rot = 0.0
.Double Trans_w = 0.0
.Double Trans_x = 0.0
.Double Trans_y = 0.0
.Double Trans_z = 0.0
.Double W_Add = 0
[CONSTANTS]
.Double offset = 1E-10
.Double Solution_w = 0
.Double Solution_x = 1
.Double Solution_y = 0
.Double Solution_z = 0
[SOURCE]
procedure MyFormula(var x, y, z, w: Double; PIteration3D: TPIteration3D);

var
   sq_r, r, theta, sth, cth, r_yzw, pow_r, h1: double;
//   cx, cy, cz, cw: double;
   ax, ay, az, aw: double;
   diffx, diffy, diffz, diffw: double;
   tmpx, tmpy, tmpz, tmpw: double;
//   tmp2x, tmp2y, tmp2z, tmp2w: double;
   fac_eff, power_eff: double;

begin

// Preparation operations
   ax := PIteration3D^.J1;
   ay := PIteration3D^.J2;
   az := PIteration3D^.J3;
   aw := W_Add;

   power_eff := Power_-1;
   fac_eff := power_eff/Power_;
   
   x := x + Trans_x;
   y := y + Trans_y;
   z := z + Trans_z;
   w := w + Trans_w;
   
// MB3D needs a potentially diverging value of tripex t=(x,y,z,w) to work correctly.
// However the Newton method for t^power-c is so far always converging.
// Fortunately there is a one-to-one relation between these values.
// Below the t from MB3D is transformed 
// to the t used for the Newton calculations
   sq_r := Fake_Bailout/(x*x + y*y + z*z + w*w + Offset);
   x := x*sq_r + Solution_x;
   y := Inversion_Factor*y*sq_r + Solution_y;
   z := Inversion_Factor*z*sq_r + Solution_z;
   w := Inversion_Factor*w*sq_r + Solution_w;

// Calculate the inverse power of t=(x,y,z,w),
// and use it for the Newton method calculations for t^power + c = 0
// i.e. t(n+1) = 2*t(n)/3 - c/2*t(n)^2

   sq_r := x*x + y*y + z*z + w*w;
   r := sqrt(sq_r);
   r_yzw := sqrt(y*y + z*z + w*w); 
   theta := Fac_Theta*power_eff*ArcCos(x/r);
   SinCos(theta, sth, cth);
   pow_r := Power(r, power_eff);
   h1 := pow_r*((1 - Rot)*sth + Rot*cth)/r_yzw;
   
   tmpx := pow_r*((1 - Rot)*cth + Rot*sth);
   tmpy := h1*y;
   tmpz := h1*z;
   tmpw := h1*w;
   
   sq_r := tmpx*tmpx + tmpy*tmpy + tmpz*tmpz + tmpw*tmpw;
   sq_r := 1/(Power_*sq_r + offset);

   tmpx := -tmpx*sq_r;
   tmpy := tmpy*sq_r;
   tmpz := tmpz*sq_r;
   tmpw := tmpw*sq_r;

// Formula simplification:
    // Commented out the multiplication of c with 1/(power*t(n)^(power-1)) -- 
    // so that we don't calculate the solution for t^power+c=0 anymore, 
    // but for t^power-1=0

    //Calculate c*t
    //   tmp2x := cx*tmpx - cy*tmpy - cz*tmpz - cw*tmpw ;
    //   tmp2y := cx*tmpy + cy*tmpx + cz*tmpw - cw*tmpz ;
    //   tmp2z := cx*tmpz - cy*tmpw + cz*tmpx + cw*tmpy ;
    //   tmp2w := cx*tmpw + cy*tmpz - cz*tmpy + cw*tmpx ;

   x := fac_eff*x - tmpx;
   y := fac_eff*y - tmpy;
   z := fac_eff*z - tmpz;
   w := fac_eff*w - tmpw;

// Below the z used for (converging) Newton calculation 
// is transformed back to the potentially diverging z used by MB3D
// (see also the notes above)
   diffx := (x - Solution_x);
   diffy := (y - Solution_y);
   diffz := (z - Solution_z);
   diffw := (w - Solution_w);

   sq_r := Fake_Bailout2/(diffx*diffx + diffy*diffy + diffz*diffz + Offset);
   x := diffx*sq_r;
   y := Inversion_Factor*diffy*sq_r;
   z := Inversion_Factor*diffz*sq_r;
   w := Inversion_Factor*diffw*sq_r;

   x := x - Trans_x + ax;
   y := y - Trans_y + ay;
   z := z - Trans_z + az;
   w := w - Trans_w + aw;

end;
[END]
SUMMARY:
 Quaternion Newton, real power. 
 Definition of real power:
  q^n = |q|^n * (cos(n*theta) + mu*sin(n*theta)) 
  mu = (y,z,w)/|y,z,w|
  theta = arccos(x/|q|)

CHANGES:
Original:  JIT_gnj_QuatPowNNewton_01.m3f

JIT_gnj_QuatPowNNewtC_01.m3f:
   Added correct multiplication of c, and t
   
JIT_gnj_QuatPowNNewtC_02.m3f:
   Taken over all tweak params from 
   JIT_gnj_RealPowNewtCS_3b.m3f
   (as appropriate for quaternions)

JIT_gnj_QuatPowNNewtC_02a.m3f:
   Added parameter Rot that transists 
   between cos and sin of theta
   
JIT_gnj_QuatPowNNewtE_01.m3f:
   - Leave c fix (as -1,0,0),
   - Eliminate according multiplication 
     operations for c*(1/3z^2) to 
	 improve performance
   - Add the Mandelbrot/Julia variable at the
     end of the outer calculation instead 
	 This is maybe mathematically meaningless, 
	 but leads to a situation where those
	 values can be used much more fruitful
	 than in earlier versions
	 ATTENTION:  Julia values (0,0,0,0) are 
	 equivalent to the old 'pure' Newton bulb
   - Leave Solution fix (as 1,0,0),
     keep the operations - Solution_xyz
	 variables are now just constants
   - Changed RStop to the usual 16;
     this appears to work now 
	 for an unknown reason

PARAMETERS:
   
 Fake_Bailout, Fake_Bailout2:
   Default = 1
   ORIGINAL INTENTION:  
   In some hybrids it is necessary to
   increase the value of 'R Bailout'
   on the formula window to avoid
   unwanted cuts.
   In this case you may set
   Fake_Bailout to 'R bailout'/4 as a
   start value.
   MEANWHILE:
   It turned out that changing this value
   can lead to completely different
   structures. I don't have a simple 
   suggestion - you may use samples that
   exist especially on ff.org
   ATTENTION:  
   Changing the value of both params
   in parallel scales the complete object.
   You may use the _ScaleC4d transfrom
   on 4Da tab as a pretransform to
   scale the object back.
   Fake_Bailout - used BEFORE the transformation
   Fake_Bailout2 - used AFTER the transformation
   
  Fac_Theta:
    Default = 1
	With this param you can vary the
	radial angles of the potence
	when calculating the power of
	(x,y,z).
	Hence it disturbs the power
	calculation, but in a very smooth way.
	You even may try to set the
	param to 0.
	
  Trans_x/y/z:
    Parameter to set translation (forth and back) 
	
  Inversion_Factor:
    -1 -> triplex inversion
	+1 -> sphere inversion
	At least this was the thought - 
	However it turned out that they
	are equivalent for symmetry reasons.
	However, it's worth to play with values
	of |Inversion_Factor| != 1
	
  Rot:
    Default = 0
	Transists between sin and cos of theta
	1 -> sin and cos have switched their place

FORMULA:
// Preparation operations
   ax := PIteration3D^.J1;
   ay := PIteration3D^.J2;
   az := PIteration3D^.J3;
   aw := W_Add;

   power_eff := Power_-1;
   fac_eff := power_eff/Power_;
   
   x := x + Trans_x;
   y := y + Trans_y;
   z := z + Trans_z;
   w := w + Trans_w;
   
// Converting the diverging (x,y,z) back to the variable
// that can be used for the (converging) Newton method calculation
   sq_r := Fake_Bailout/(x*x + y*y + z*z + w*w + Offset);
   x := x*sq_r + Solution_x;
   y := Inversion_Factor*y*sq_r + Solution_y;
   z := Inversion_Factor*z*sq_r + Solution_z;
   w := Inversion_Factor*w*sq_r + Solution_w;

// Calculate the inverse power of t=(x,y,z,w),
// and use it for the Newton method calculations for t^power + c = 0
// i.e. t(n+1) = 2*t(n)/3 - c/2*t(n)^2

   sq_r := x*x + y*y + z*z + w*w;
   r := sqrt(sq_r);
   r_yzw := sqrt(y*y + z*z + w*w); 
   theta := Fac_Theta*power_eff*ArcCos(x/r);
   SinCos(theta, sth, cth);
   pow_r := Power(r, power_eff);
   h1 := pow_r*((1 - Rot)*sth + Rot*cth)/r_yzw;
   
   tmpx := pow_r*((1 - Rot)*cth + Rot*sth);
   tmpy := h1*y;
   tmpz := h1*z;
   tmpw := h1*w;
   
   sq_r := tmpx*tmpx + tmpy*tmpy + tmpz*tmpz + tmpw*tmpw;
   sq_r := 1/(Power_*sq_r + offset);

   tmpx := -tmpx*sq_r;
   tmpy := tmpy*sq_r;
   tmpz := tmpz*sq_r;
   tmpw := tmpw*sq_r;

//Calculate c*t

//   tmp2x := cx*tmpx - cy*tmpy - cz*tmpz - cw*tmpw ;
//   tmp2y := cx*tmpy + cy*tmpx + cz*tmpw - cw*tmpz ;
//   tmp2z := cx*tmpz - cy*tmpw + cz*tmpx + cw*tmpy ;
//   tmp2w := cx*tmpw + cy*tmpz - cz*tmpy + cw*tmpx ;

   x := fac_eff*x - tmpx;
   y := fac_eff*y - tmpy;
   z := fac_eff*z - tmpz;
   w := fac_eff*w - tmpw;

// Below the hack that provides a divergent value of (x,y,z) to MB3D
// although the plain Newton method does always converge
   diffx := (x - Solution_x);
   diffy := (y - Solution_y);
   diffz := (z - Solution_z);
   diffw := (w - Solution_w);

   sq_r := Fake_Bailout2/(diffx*diffx + diffy*diffy + diffz*diffz + Offset);
   x := diffx*sq_r;
   y := Inversion_Factor*diffy*sq_r;
   z := Inversion_Factor*diffz*sq_r;
   w := Inversion_Factor*diffw*sq_r;

   x := x - Trans_x + ax;
   y := y - Trans_y + ay;
   z := z - Trans_z + az;
   w := w - Trans_w + aw;

